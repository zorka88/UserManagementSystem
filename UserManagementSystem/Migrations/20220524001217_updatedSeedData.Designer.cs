// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManagementSystem.Data;

namespace UserManagementSystem.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20220524001217_updatedSeedData")]
    partial class updatedSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UserManagementSystem.Data.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("UserManagementSystem.Data.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Admin",
                            Description = "Admin opis"
                        },
                        new
                        {
                            Id = 2,
                            Code = "User",
                            Description = "User opis"
                        });
                });

            modelBuilder.Entity("UserManagementSystem.Data.Models.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersPermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("UserManagementSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StatusIsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "105711a5-bcbd-4c40-a7ea-105c9eb9ebab",
                            Email = "marko@marko1.com",
                            EmailConfirmed = true,
                            FirstName = "Administrator",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@marko1.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b694df5-adc0-4ef2-9772-45da80cff0cc",
                            Email = "marko@marko2.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@marko2.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "47707a04-36c7-4cb9-ad94-43a182c57d5c",
                            Email = "marko@mar3ko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@mar3ko.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3910d2f4-8403-4ac0-81c1-a976a9a96402",
                            Email = "marko@mark4o.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@mark4o.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20cd0f25-77a8-40dc-99b8-e6cd2be72ee9",
                            Email = "marko@marko4.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@marko4.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6278785-be4d-417b-b43c-3f8ff66cb0b8",
                            Email = "marko@m6arko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@m6arko.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8122e3e7-d8ef-43e0-826b-4ac84aba72c0",
                            Email = "marko@ma6rko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@ma6rko.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "df84bce9-ddf1-48e4-9cec-71c9a4807524",
                            Email = "marko@mar6ko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@mar6ko.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e016185-f3cd-4d4e-86e9-508b79e4f37a",
                            Email = "marko@mark6o.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "arko@mark6o.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4e2a9240-83ea-4473-afce-b4edb3b14eb8",
                            Email = "marko@marko6.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@marko6.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9f3361c7-474e-464b-9f9c-fb066687cbe9",
                            Email = "marko@m7arko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@m7arko.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4af3758-2d49-470e-af8d-6917f89aa6d2",
                            Email = "marko@ma7rko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@ma7rko.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "76e82d09-bb65-4a8d-8734-5440978e968c",
                            Email = "marko@mar7ko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "marko@mar7ko.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserManagementSystem.Data.Models.UserPermission", b =>
                {
                    b.HasOne("UserManagementSystem.Data.Models.Permission", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagementSystem.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagementSystem.Data.Models.Permission", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserManagementSystem.Models.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
