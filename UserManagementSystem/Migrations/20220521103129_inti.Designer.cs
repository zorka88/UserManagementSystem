// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UserManagementSystem.Data;

namespace UserManagementSystem.Migrations
{
    [DbContext(typeof(UsersDbContext))]
    [Migration("20220521103129_inti")]
    partial class inti
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UserManagementSystem.Data.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("UserManagementSystem.Data.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Admin",
                            Description = "Admin opis"
                        },
                        new
                        {
                            Id = 2,
                            Code = "User",
                            Description = "User opsi"
                        });
                });

            modelBuilder.Entity("UserManagementSystem.Data.Models.UserPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersPermissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PermissionId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            PermissionId = 2,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("UserManagementSystem.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("StatusIsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "22aa2ab2-31d2-493c-8f8f-92883ffeeab6",
                            Email = "marko@marko1.com",
                            EmailConfirmed = true,
                            FirstName = "Administrator",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "49a688ac-f107-4e61-8b92-dcfd985d1599",
                            Email = "marko@marko2.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5d1a6c8e-a64d-4451-aa0a-096a236ed384",
                            Email = "marko@mar3ko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2fec82b6-1df3-4c7f-b696-459e41806aef",
                            Email = "marko@mark4o.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4685ed05-0723-4b09-bbca-c304f897c238",
                            Email = "marko@marko4.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef97c629-a5f9-4d23-8dab-20a848f467d9",
                            Email = "marko@m6arko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1f377d6-45c9-4946-adb5-6ec6fdad488b",
                            Email = "marko@ma6rko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0f0a4f0-b3ed-40a9-87d8-4fd85d81afe6",
                            Email = "marko@mar6ko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3f4393e9-e985-42bb-8d7e-3b5a1c761f44",
                            Email = "marko@mark6o.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f2c273c-2d15-4f38-b29e-5d6d88ae422f",
                            Email = "marko@marko6.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "282b7c25-252f-42c2-90be-6f7eff0fca1d",
                            Email = "marko@m7arko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c7ed81d9-fccb-420e-b76e-ae191039780d",
                            Email = "marko@ma7rko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7971076f-c8c7-4c7b-a618-fb4195dc88cd",
                            Email = "marko@mar7ko.com",
                            EmailConfirmed = true,
                            FirstName = "Mark",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            StatusIsActive = true,
                            TwoFactorEnabled = false,
                            UserName = "usernm"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Data.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("UserManagementSystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserManagementSystem.Data.Models.UserPermission", b =>
                {
                    b.HasOne("UserManagementSystem.Data.Models.Permission", "Permission")
                        .WithMany("Users")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserManagementSystem.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserManagementSystem.Data.Models.Permission", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UserManagementSystem.Models.User", b =>
                {
                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
